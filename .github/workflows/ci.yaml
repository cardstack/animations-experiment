name: CI

on:
  push:
    branches: [main, realm/fetch-host-zip-cs-5076] # FIXME remove
  # pull_request: FIXME restore

env:
  PNPM_VERSION: 7.2.1

  # This controls what version of node first boots pnpm, but pnpm itself will
  # read the .npmrc file and download a different version if they don't match.
  NODE_VERSION: 18.6.0

permissions:
  contents: read
  id-token: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint Boxel Motion
        run: pnpm run lint
        working-directory: packages/boxel-motion
      - name: Lint Boxel Motion Test App
        run: pnpm run lint
        working-directory: packages/boxel-motion-test-app
      - name: Lint Boxel Motion Demo App
        run: pnpm run lint
        working-directory: packages/boxel-motion-demo-app
      - name: Lint Host
        run: pnpm run lint
        working-directory: packages/host
      - name: Lint Realm Server
        run: pnpm run lint
        working-directory: packages/realm-server
      - name: Lint Worker
        run: pnpm run lint
        working-directory: packages/worker
      - name: Run Tests
        run: pnpm run test:ember
        working-directory: packages/boxel-motion-test-app
  boxel-test:
    name: Boxel Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Run Tests
        run: pnpm run test:ember
        working-directory: packages/boxel-motion-test-app
  host-test:
    name: Host Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Build host dist/ for fastboot
        run: pnpm build
        working-directory: packages/host
      - name: Start realm servers
        run: pnpm start:all &
        working-directory: packages/realm-server
      - name: host test suite
        run: pnpm test
        working-directory: packages/host
  realm-server-test:
    name: Realm Server Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Build host dist/ for fastboot
        run: pnpm build
        working-directory: packages/host
      - name: Start base realm server
        run: pnpm start:all &
        working-directory: packages/realm-server
      - name: realm server test suite
        run: pnpm test:wait-for-servers
        working-directory: packages/realm-server

  change-check:
    name: Check which packages changed
    needs: [host-test, realm-server-test]
    if: github.ref == 'refs/heads/realm/fetch-host-zip-cs-5076' # FIXME restore to main
    runs-on: ubuntu-latest
    outputs:
      host: ${{ steps.filter.outputs.host }}
      realm-server: ${{ steps.filter.outputs.realm-server }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        # FIXME restore filters for host
        with:
          filters: |
            host:
              - 'packages/host/**'
            realm-server:
              - 'packages/realm-server/**'
              - 'packages/base/**'
              - 'packages/host/**'
              - 'packages/runtime-common/**'
              - '.github/workflows/ci.yaml'
              - '.github/actions/deploy-realm-server/**'
              - '.github/actions/waypoint-deploy/**'
              - 'pnpm-lock.yaml'


  host-deploy:
    name: Deploy host to staging
    needs: change-check
    if: ${{ needs.change-check.outputs.host == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ toJSON(needs.change-check.outputs) }}"
      - uses: actions/checkout@v3
      - name: Deploy boxel-host
        uses: ./.github/actions/deploy-boxel-host
        with:
          environment: staging
          discord_webhook: ${{ secrets.DISCORD_WEBHOOK }}

  realm-server-deploy:
    name: Deploy realm server to staging
    needs: [change-check, host-deploy]
    if: ${{ needs.change-check.outputs.realm-server == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: [realm-base, realm-demo]
    steps:
      - uses: actions/checkout@v3

      - name: Deploy ${{ matrix.app }}
        uses: ./.github/actions/deploy-realm-server
        with:
          app_name: ${{ matrix.app }}
          environment: staging
          discord_webhook: ${{ secrets.DISCORD_WEBHOOK }}
          production_waypoint_server_token: ${{ secrets.PRODUCTION_WAYPOINT_SERVER_TOKEN }}
          production_waypoint_server_address: ${{ secrets.PRODUCTION_WAYPOINT_SERVER_ADDR }}
          staging_waypoint_server_token: ${{ secrets.STAGING_WAYPOINT_SERVER_TOKEN }}
          staging_waypoint_server_address: ${{ secrets.STAGING_WAYPOINT_SERVER_ADDR }}
