{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","animations/tests/helpers/ember-power-select.js","animations/tests/page-object.js","animations/tests/test-helper.js","animations/tests/unit/behaviors/linear-test.js","animations/tests/unit/behaviors/spring-test.js","animations/tests/unit/models/sprite-tree-test.js","animations/tests/unit/services/animations-test.js","animations/tests/unit/util/css-to-unit-value-test.js","animations/tests/unit/util/instantaneous-velocity-test.js","animations/tests/unit/util/keyframe-generator-test.js","animations/tests/unit/value/index-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"animations/tests/helpers/ember-power-select\", [\"exports\", \"ember-power-select/test-support/helpers\"], function (_exports, _helpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = deprecatedRegisterHelpers;\n  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, {\n        until: '1.11.0',\n        id: `ember-power-select-test-support-${name}`\n      }));\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  _exports.findContains = findContains;\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  _exports.nativeMouseDown = nativeMouseDown;\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  _exports.nativeMouseUp = nativeMouseUp;\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  _exports.triggerKeydown = triggerKeydown;\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  _exports.typeInSearch = typeInSearch;\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  _exports.clickTrigger = clickTrigger;\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  _exports.nativeTouch = nativeTouch;\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  _exports.touchTrigger = touchTrigger;\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n  _exports.selectChoose = selectChoose;\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, {\n      until: '1.11.0',\n      id: 'ember-power-select-test-support-register-helpers'\n    }));\n    return (0, _helpers.default)();\n  }\n});","define(\"animations/tests/page-object\", [\"exports\", \"ember-cli-page-object/test-support/-private/deprecate\", \"ember-cli-page-object\"], function (_exports, _deprecate, _emberCliPageObject) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"alias\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.alias;\n    }\n  });\n  Object.defineProperty(_exports, \"attribute\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.attribute;\n    }\n  });\n  Object.defineProperty(_exports, \"clickOnText\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.clickOnText;\n    }\n  });\n  Object.defineProperty(_exports, \"clickable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.clickable;\n    }\n  });\n  Object.defineProperty(_exports, \"collection\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.collection;\n    }\n  });\n  Object.defineProperty(_exports, \"contains\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.contains;\n    }\n  });\n  Object.defineProperty(_exports, \"count\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.count;\n    }\n  });\n  Object.defineProperty(_exports, \"create\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.create;\n    }\n  });\n  Object.defineProperty(_exports, \"fillable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.fillable;\n    }\n  });\n  Object.defineProperty(_exports, \"selectable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.fillable;\n    }\n  });\n  Object.defineProperty(_exports, \"focusable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.focusable;\n    }\n  });\n  Object.defineProperty(_exports, \"hasClass\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.hasClass;\n    }\n  });\n  Object.defineProperty(_exports, \"is\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.is;\n    }\n  });\n  Object.defineProperty(_exports, \"isHidden\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.isHidden;\n    }\n  });\n  Object.defineProperty(_exports, \"isPresent\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.isPresent;\n    }\n  });\n  Object.defineProperty(_exports, \"isVisible\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.isVisible;\n    }\n  });\n  Object.defineProperty(_exports, \"notHasClass\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.notHasClass;\n    }\n  });\n  Object.defineProperty(_exports, \"property\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.property;\n    }\n  });\n  Object.defineProperty(_exports, \"text\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.text;\n    }\n  });\n  Object.defineProperty(_exports, \"triggerable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.triggerable;\n    }\n  });\n  Object.defineProperty(_exports, \"value\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.value;\n    }\n  });\n  Object.defineProperty(_exports, \"visitable\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.visitable;\n    }\n  });\n  Object.defineProperty(_exports, \"buildSelector\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.buildSelector;\n    }\n  });\n  Object.defineProperty(_exports, \"findElementWithAssert\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.findElementWithAssert;\n    }\n  });\n  Object.defineProperty(_exports, \"findElement\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.findElement;\n    }\n  });\n  Object.defineProperty(_exports, \"getContext\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.getContext;\n    }\n  });\n  Object.defineProperty(_exports, \"fullScope\", {\n    enumerable: true,\n    get: function () {\n      return _emberCliPageObject.fullScope;\n    }\n  });\n  _exports.default = void 0;\n  var _default = {\n    alias: _emberCliPageObject.alias,\n    attribute: _emberCliPageObject.attribute,\n    blurrable: _emberCliPageObject.blurrable,\n    clickOnText: _emberCliPageObject.clickOnText,\n    clickable: _emberCliPageObject.clickable,\n    collection: _emberCliPageObject.collection,\n    contains: _emberCliPageObject.contains,\n    count: _emberCliPageObject.count,\n    create: _emberCliPageObject.create,\n    fillable: _emberCliPageObject.fillable,\n    focusable: _emberCliPageObject.focusable,\n    hasClass: _emberCliPageObject.hasClass,\n    is: _emberCliPageObject.is,\n    isHidden: _emberCliPageObject.isHidden,\n    isPresent: _emberCliPageObject.isPresent,\n    isVisible: _emberCliPageObject.isVisible,\n    notHasClass: _emberCliPageObject.notHasClass,\n    property: _emberCliPageObject.property,\n    selectable: _emberCliPageObject.fillable,\n    text: _emberCliPageObject.text,\n    triggerable: _emberCliPageObject.triggerable,\n    value: _emberCliPageObject.value,\n    visitable: _emberCliPageObject.visitable\n  };\n  _exports.default = _default;\n  (0, _deprecate.default)('import-from-test-support', `Importing from \"test-support\" is now deprecated. Please import directly from the \"ember-cli-page-object\" module instead.`, '1.16.0', '2.0.0');\n});","define(\"animations/tests/test-helper\", [\"animations/app\", \"animations/config/environment\", \"qunit\", \"@ember/test-helpers\", \"qunit-dom\", \"ember-qunit\"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _emberQunit.start)();\n});","define(\"animations/tests/unit/behaviors/linear-test\", [\"qunit\", \"animations/behaviors/linear\"], function (_qunit, _linear) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Behaviors | Linear', function () {\n    (0, _qunit.test)('generates minimum of 2 frames', function (assert) {\n      let behavior = new _linear.default();\n      assert.deepEqual(behavior.toFrames({\n        from: 0,\n        to: 1,\n        duration: 0\n      }), [{\n        value: 0,\n        velocity: 0.000059999999999999995\n      }, {\n        value: 1,\n        velocity: 0.000059999999999999995\n      }]);\n      assert.deepEqual(behavior.toFrames({\n        from: 1,\n        to: 0,\n        duration: 0\n      }), [{\n        value: 1,\n        velocity: -0.000059999999999999995\n      }, {\n        value: 0,\n        velocity: -0.000059999999999999995\n      }]);\n    });\n    (0, _qunit.test)('does nothing when from and to are the same', function (assert) {\n      let behavior = new _linear.default();\n      assert.deepEqual(behavior.toFrames({\n        from: 1,\n        to: 1,\n        duration: 0\n      }), []);\n      assert.deepEqual(behavior.toFrames({\n        from: 0,\n        to: 0,\n        duration: 0\n      }), []);\n    });\n    (0, _qunit.test)('frames are generated at 60 FPS', function (assert) {\n      let behavior = new _linear.default();\n      let frames = behavior.toFrames({\n        from: 0,\n        to: 1,\n        duration: 100\n      });\n      assert.equal(frames.length, 7);\n      assert.deepEqual(frames, [{\n        value: 0,\n        velocity: 0.00001\n      }, {\n        value: 0.16666666666666666,\n        velocity: 0.00001\n      }, {\n        value: 0.3333333333333333,\n        velocity: 0.00001\n      }, {\n        value: 0.5,\n        velocity: 0.00001\n      }, {\n        value: 0.6666666666666666,\n        velocity: 0.00001\n      }, {\n        value: 0.8333333333333334,\n        velocity: 0.00001\n      }, {\n        value: 1,\n        velocity: 0.00001\n      }]);\n    });\n    (0, _qunit.test)('takes a delay into account', function (assert) {\n      let behavior = new _linear.default();\n      let frames = behavior.toFrames({\n        from: 0,\n        to: 1,\n        duration: 100,\n        delay: 50\n      });\n      assert.equal(frames.length, 10);\n      assert.deepEqual(frames, [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0,\n        velocity: 0.00001\n      }, {\n        value: 0.16666666666666666,\n        velocity: 0.00001\n      }, {\n        value: 0.3333333333333333,\n        velocity: 0.00001\n      }, {\n        value: 0.5,\n        velocity: 0.00001\n      }, {\n        value: 0.6666666666666666,\n        velocity: 0.00001\n      }, {\n        value: 0.8333333333333334,\n        velocity: 0.00001\n      }, {\n        value: 1,\n        velocity: 0.00001\n      }]);\n    });\n    (0, _qunit.test)('takes previous frames into account', function (assert) {\n      let behavior = new _linear.default();\n      let previousFramesFromTime = [{\n        value: 0.25,\n        velocity: 0.000015\n      }, {\n        value: 0.5,\n        velocity: 0.000015\n      }, {\n        value: 0.75,\n        velocity: 0.000015\n      }, {\n        value: 1,\n        velocity: 0.000015\n      }];\n      let frames = behavior.toFrames({\n        from: 1,\n        to: 0,\n        duration: 100,\n        previousFramesFromTime\n      });\n      assert.equal(frames.length, 7);\n      assert.deepEqual(frames, [{\n        value: 0.25,\n        velocity: 0 // TODO: fix this, there should be a velocity here from the frame before\n\n      }, {\n        value: 0.6111111111111112,\n        velocity: 0.00001333333333333333\n      }, {\n        value: 0.6944444444444444,\n        velocity: -0.000003333333333333335\n      }, {\n        value: 0.5,\n        velocity: -0.00001083333333333333\n      }, {\n        value: 0.33333333333333337,\n        velocity: -0.00001\n      }, {\n        value: 0.16666666666666663,\n        velocity: -0.00001\n      }, {\n        value: 0,\n        velocity: -0.00001\n      }]);\n    });\n    (0, _qunit.test)('takes previous frames and delay into account', function (assert) {\n      let behavior = new _linear.default();\n      let previousFramesFromTime = [{\n        value: 0.25,\n        velocity: 0.000015\n      }, {\n        value: 0.5,\n        velocity: 0.000015\n      }, {\n        value: 0.75,\n        velocity: 0.000015\n      }, {\n        value: 1,\n        velocity: 0.000015\n      }];\n      let frames = behavior.toFrames({\n        from: 1,\n        to: 0,\n        duration: 100,\n        delay: 50,\n        previousFramesFromTime\n      });\n      assert.equal(frames.length, 10);\n      assert.deepEqual(frames, [{\n        value: 0.25,\n        velocity: 0\n      }, {\n        value: 0.6666666666666667,\n        velocity: 0.000019999999999999998\n      }, {\n        value: 0.9166666666666666,\n        velocity: 0.000009999999999999997\n      }, {\n        value: 1,\n        velocity: -0.0000024999999999999977\n      }, {\n        value: 0.8333333333333334,\n        velocity: -0.00001\n      }, {\n        value: 0.6666666666666667,\n        velocity: -0.00001\n      }, {\n        value: 0.5,\n        velocity: -0.00001\n      }, {\n        value: 0.33333333333333337,\n        velocity: -0.00001\n      }, {\n        value: 0.16666666666666663,\n        velocity: -0.00001\n      }, {\n        value: 0,\n        velocity: -0.00001\n      }]);\n    });\n    (0, _qunit.test)('takes last frame and previous frames into account', function (assert) {\n      let behavior = new _linear.default();\n      let lastFrame = {\n        value: 0,\n        velocity: 0.000015\n      };\n      let previousFramesFromTime = [{\n        value: 0.25,\n        velocity: 0.000015\n      }, {\n        value: 0.5,\n        velocity: 0.000015\n      }, {\n        value: 0.75,\n        velocity: 0.000015\n      }, {\n        value: 1,\n        velocity: 0.000015\n      }];\n      let frames = behavior.toFrames({\n        from: 1,\n        to: 0,\n        duration: 100,\n        lastFrame,\n        previousFramesFromTime\n      });\n      assert.equal(frames.length, 7);\n      assert.deepEqual(frames, [{\n        value: 0.25,\n        velocity: 0.000018333333333333333\n      }, {\n        value: 0.6111111111111112,\n        velocity: 0.00001333333333333333\n      }, {\n        value: 0.6944444444444444,\n        velocity: -0.000003333333333333335\n      }, {\n        value: 0.5,\n        velocity: -0.00001083333333333333\n      }, {\n        value: 0.33333333333333337,\n        velocity: -0.00001\n      }, {\n        value: 0.16666666666666663,\n        velocity: -0.00001\n      }, {\n        value: 0,\n        velocity: -0.00001\n      }]);\n    });\n  });\n});","define(\"animations/tests/unit/behaviors/spring-test\", [\"qunit\", \"animations/behaviors/spring\"], function (_qunit, _spring) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Behaviors | Spring', function () {\n    (0, _qunit.test)('generates minimum of 2 frames', function (assert) {\n      let spring = new _spring.default({\n        overshootClamping: true,\n        stiffness: 1000000\n      });\n      assert.deepEqual(spring.toFrames({\n        from: 0,\n        to: 1\n      }), [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n      assert.deepEqual(spring.toFrames({\n        from: 1,\n        to: 0\n      }), [{\n        value: 1,\n        velocity: 0\n      }, {\n        value: 0,\n        velocity: 0\n      }]);\n    });\n    (0, _qunit.test)('does nothing when from and to are the same', function (assert) {\n      let behavior = new _spring.default();\n      assert.deepEqual(behavior.toFrames({\n        from: 1,\n        to: 1\n      }), []);\n      assert.deepEqual(behavior.toFrames({\n        from: 0,\n        to: 0\n      }), []);\n    });\n    (0, _qunit.test)('handles from and to being the same with an initial velocity', function (assert) {\n      let behavior = new _spring.default();\n      assert.deepEqual(behavior.toFrames({\n        from: 0,\n        to: 0,\n        velocity: -0.01\n      }), [{\n        value: 0,\n        velocity: 0.01\n      }, {\n        value: 0.1528088570040308,\n        velocity: 0.008340728171260428\n      }, {\n        value: 0.27825797446520345,\n        velocity: 0.006723269174896948\n      }, {\n        value: 0.3773452034749068,\n        velocity: 0.005182493230700138\n      }, {\n        value: 0.4515881528317107,\n        velocity: 0.00374595983627717\n      }, {\n        value: 0.5029056563803183,\n        velocity: 0.0024343365787769557\n      }, {\n        value: 0.5335071951146929,\n        velocity: 0.0012619295827700854\n      }, {\n        value: 0.545791875591495,\n        velocity: 0.0002372949152267094\n      }, {\n        value: 0.5422580763871937,\n        velocity: -0.0006360970882793976\n      }, {\n        value: 0.5254244313351902,\n        velocity: -0.001359169658926184\n      }, {\n        value: 0.49776242621940764,\n        velocity: -0.0019365415343160382\n      }, {\n        value: 0.4616405466664897,\n        velocity: -0.0023758417271099747\n      }, {\n        value: 0.4192796296663318,\n        velocity: -0.0026870526452044416\n      }, {\n        value: 0.372718838511412,\n        velocity: -0.002881893979295509\n      }, {\n        value: 0.32379149883166436,\n        velocity: -0.0029732568269375745\n      }, {\n        value: 0.27410989870570257,\n        velocity: -0.002974694786123948\n      }, {\n        value: 0.22505806470996348,\n        velocity: -0.002899976263499643\n      }, {\n        value: 0.17779147386102315,\n        velocity: -0.00276270002797449\n      }, {\n        value: 0.13324264401804112,\n        velocity: -0.0025759741142645292\n      }, {\n        value: 0.09213155758676851,\n        velocity: -0.002352156547694297\n      }, {\n        value: 0.0549799104366701,\n        velocity: -0.0021026550181452\n      }, {\n        value: 0.022128235055606713,\n        velocity: -0.0018377815671486932\n      }, {\n        value: -0.006244980412685898,\n        velocity: -0.0015666575520376618\n      }, {\n        value: -0.030102971708941856,\n        velocity: -0.0012971635947110908\n      }, {\n        value: -0.049529879741914945,\n        velocity: -0.0010359288867213428\n      }, {\n        value: -0.0647100415508969,\n        velocity: -0.0007883540817808243\n      }, {\n        value: -0.07590790275391474,\n        velocity: -0.0005586620350229877\n      }, {\n        value: -0.08344896885182705,\n        velocity: -0.00034997081879900273\n      }, {\n        value: -0.0877021221654635,\n        velocity: -0.00016438373126346492\n      }, {\n        value: -0.08906354615585563,\n        velocity: -0.0000030913913752849244\n      }, {\n        value: -0.08794242073251282,\n        velocity: 0.00013351854137479743\n      }, {\n        value: -0.08474848182992072,\n        velocity: 0.0002457479938860654\n      }, {\n        value: -0.07988147662261798,\n        velocity: 0.00033447490797619474\n      }, {\n        value: -0.07372249254287452,\n        velocity: 0.00040104240013864303\n      }, {\n        value: -0.06662709378421994,\n        velocity: 0.000447153062680276\n      }, {\n        value: -0.05892016301478995,\n        velocity: 0.0004747703151429457\n      }, {\n        value: -0.05089231819640906,\n        velocity: 0.0004860282418869083\n      }, {\n        value: -0.04279775417059092,\n        velocity: 0.0004831509146522183\n      }, {\n        value: -0.03485334538203434,\n        velocity: 0.0004683818034524748\n      }, {\n        value: -0.027238839036949826,\n        velocity: 0.0004439235290021361\n      }, {\n        value: -0.020097966363743433,\n        velocity: 0.000411887907016877\n      }, {\n        value: -0.013540302663157908,\n        velocity: 0.00037425597962720725\n      }, {\n        value: -0.0076437137130694315,\n        velocity: 0.0003328475209883895\n      }, {\n        value: -0.0024572360618388923,\n        velocity: 0.0002892993410618076\n      }, {\n        value: 0.0019957489255270577,\n        velocity: 0.0002450515907321167\n      }, {\n        value: 0.005714173389446872,\n        velocity: 0.00020134118950138657\n      }, {\n        value: 0.008715884704400708,\n        velocity: 0.0001592014500872878\n      }, {\n        value: 0.011034286050725949,\n        velocity: 0.00011946695817027135\n      }, {\n        value: 0.012715095623345283,\n        velocity: 0.00008278277596188797\n      }, {\n        value: 0.013813288992926649,\n        velocity: 0.00004961707086704248\n      }, {\n        value: 0.014390274555290041,\n        velocity: 0.00002027632105086197\n      }, {\n        value: 0.014511338388718938,\n        velocity: -0.000005077685847836063\n      }, {\n        value: 0.01424338238586361,\n        velocity: -0.000026409770067374123\n      }, {\n        value: 0.013652968376462413,\n        velocity: -0.00004379282114229743\n      }, {\n        value: 0.012804671193834542,\n        velocity: -0.00005738934662324687\n      }, {\n        value: 0.011759735298285915,\n        velocity: -0.00006743356570549744\n      }, {\n        value: 0.010575022648582592,\n        velocity: -0.00007421442121284853\n      }, {\n        value: 0.009302233967521532,\n        velocity: -0.00007805980260959573\n      }, {\n        value: 0.007987381309544024,\n        velocity: -0.00007932219686849877\n      }, {\n        value: 0.006670486814825672,\n        velocity: -0.00007836591428640314\n      }, {\n        value: 0.005385480616059636,\n        velocity: -0.00007555597355385795\n      }, {\n        value: 0.004160269930512819,\n        velocity: -0.00007124867508634149\n      }, {\n        value: 0.0030169512935579496,\n        velocity: -0.00006578384407486196\n      }, {\n        value: 0.00197213854111426,\n        velocity: -0.00005947868493695467\n      }, {\n        value: 0.0010373803989393855,\n        velocity: -0.000052623156667530715\n      }, {\n        value: 0,\n        velocity: 0\n      }]);\n    });\n    (0, _qunit.test)('overshootClamping prevents the spring from exceeding its target value', function (assert) {\n      let unclampedSpring = new _spring.default({\n        overshootClamping: false,\n        damping: 100,\n        stiffness: 100000\n      });\n      assert.deepEqual(unclampedSpring.toFrames({\n        from: 0,\n        to: 1\n      }), [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0.8561306451232562,\n        velocity: -0.12268904506936934\n      }, {\n        value: 1.129827626527687,\n        velocity: -0.05035498930918157\n      }, {\n        value: 1.0804582724019351,\n        velocity: 0.0025058821427456123\n      }, {\n        value: 1.0085010368734653,\n        velocity: 0.010539312543348403\n      }, {\n        value: 0.9882924567744584,\n        velocity: 0.003852326384191916\n      }, {\n        value: 0.9935892608552294,\n        velocity: -0.00040951734140965866\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n      let clampedSpring = new _spring.default({\n        overshootClamping: true,\n        damping: 100,\n        stiffness: 100000\n      });\n      assert.deepEqual(clampedSpring.toFrames({\n        from: 0,\n        to: 1\n      }), [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0.8561306451232562,\n        velocity: -0.12268904506936934\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n    });\n    (0, _qunit.test)('underdamped spring', function (assert) {\n      let underdampedSpring = new _spring.default({\n        stiffness: 100,\n        damping: 10,\n        mass: 1\n      });\n      assert.deepEqual(underdampedSpring.toFrames({\n        from: 0,\n        to: 1\n      }), [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0.01311832586992645,\n        velocity: 0.0015280885700403079\n      }, {\n        value: 0.04941510804510185,\n        velocity: 0.0027825797446520348\n      }, {\n        value: 0.10440547345507933,\n        velocity: 0.003773452034749069\n      }, {\n        value: 0.1738158635405722,\n        velocity: 0.004515881528317108\n      }, {\n        value: 0.2536606857419862,\n        velocity: 0.0050290565638031835\n      }, {\n        value: 0.3402998466082985,\n        velocity: 0.00533507195114693\n      }, {\n        value: 0.430478632885834,\n        velocity: 0.005457918755914951\n      }, {\n        value: 0.5213516324407461,\n        velocity: 0.005422580763871937\n      }, {\n        value: 0.6104925345574281,\n        velocity: 0.005254244313351903\n      }, {\n        value: 0.695891727212196,\n        velocity: 0.004977624262194077\n      }, {\n        value: 0.7759436260445078,\n        velocity: 0.0046164054666648965\n      }, {\n        value: 0.8494256348541123,\n        velocity: 0.004192796296663319\n      }, {\n        value: 0.9154705594181388,\n        velocity: 0.00372718838511412\n      }, {\n        value: 0.973534183862093,\n        velocity: 0.0032379149883166444\n      }, {\n        value: 1.0233595799066921,\n        velocity: 0.002741098987057026\n      }, {\n        value: 1.0649395616400008,\n        velocity: 0.002250580647099635\n      }, {\n        value: 1.0984785289364258,\n        velocity: 0.0017779147386102314\n      }, {\n        value: 1.1243547674084118,\n        velocity: 0.001332426440180411\n      }, {\n        value: 1.1430840971826612,\n        velocity: 0.0009213155758676852\n      }, {\n        value: 1.15528559137785,\n        velocity: 0.0005497991043667012\n      }, {\n        value: 1.1616499216592626,\n        velocity: 0.0002212823505560672\n      }, {\n        value: 1.162910735616452,\n        velocity: -0.00006244980412685897\n      }, {\n        value: 1.1598193311800509,\n        velocity: -0.0003010297170894185\n      }, {\n        value: 1.1531227684140493,\n        velocity: -0.0004952987974191495\n      }, {\n        value: 1.1435454497289794,\n        velocity: -0.000647100415508969\n      }, {\n        value: 1.1317741062562134,\n        velocity: -0.0007590790275391475\n      }, {\n        value: 1.1184460507317273,\n        velocity: -0.0008344896885182705\n      }, {\n        value: 1.10414049529181,\n        velocity: -0.000877021221654635\n      }, {\n        value: 1.089372685293384,\n        velocity: -0.0008906354615585563\n      }, {\n        value: 1.074590566595033,\n        velocity: -0.000879424207325128\n      }, {\n        value: 1.0601736824413142,\n        velocity: -0.0008474848182992072\n      }, {\n        value: 1.0464339858249985,\n        velocity: -0.00079881476622618\n      }, {\n        value: 1.0336182525290103,\n        velocity: -0.0007372249254287452\n      }, {\n        value: 1.0219117875161923,\n        velocity: -0.0006662709378421994\n      }, {\n        value: 1.0114431315004955,\n        velocity: -0.0005892016301478996\n      }, {\n        value: 1.0022894940077183,\n        velocity: -0.0005089231819640907\n      }, {\n        value: 0.9944826627053691,\n        velocity: -0.00042797754170590915\n      }, {\n        value: 0.9880151650367869,\n        velocity: -0.00034853345382034344\n      }, {\n        value: 0.9828464861367362,\n        velocity: -0.0002723883903694983\n      }, {\n        value: 0.9789091756620557,\n        velocity: -0.00020097966363743434\n      }, {\n        value: 0.9761147047004372,\n        velocity: -0.00013540302663157908\n      }, {\n        value: 0.9743589616142305,\n        velocity: -0.00007643713713069433\n      }, {\n        value: 0.9735273019556582,\n        velocity: -0.000024572360618388932\n      }, {\n        value: 0.9734990920012613,\n        velocity: 0.000019957489255270614\n      }, {\n        value: 0.9741517076604145,\n        velocity: 0.00005714173389446873\n      }, {\n        value: 0.9753639702868705,\n        velocity: 0.00008715884704400709\n      }, {\n        value: 0.9770190181322469,\n        velocity: 0.00011034286050725949\n      }, {\n        value: 0.9790066267804659,\n        velocity: 0.00012715095623345285\n      }, {\n        value: 0.9812250039203692,\n        velocity: 0.0001381328899292665\n      }, {\n        value: 0.9835820933396238,\n        velocity: 0.00014390274555290043\n      }, {\n        value: 0.9859964301960646,\n        velocity: 0.0001451133838871894\n      }, {\n        value: 0.9883975946208738,\n        velocity: 0.00014243382385863615\n      }, {\n        value: 0.9907263137377673,\n        velocity: 0.00013652968376462416\n      }, {\n        value: 0.9929342634684901,\n        velocity: 0.00012804671193834545\n      }, {\n        value: 0.9949836212722638,\n        velocity: 0.00011759735298285918\n      }, {\n        value: 0.9968464194727022,\n        velocity: 0.00010575022648582594\n      }, {\n        value: 0.9985037462934381,\n        velocity: 0.00009302233967521533\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n    });\n    (0, _qunit.test)('critically damped spring', function (assert) {\n      let criticallydampedSpring = new _spring.default({\n        stiffness: 100,\n        damping: 20,\n        mass: 1\n      });\n      assert.deepEqual(criticallydampedSpring.toFrames({\n        from: 0,\n        to: 1\n      }), [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0.012437987627616942,\n        velocity: 0.0014108028748176901\n      }, {\n        value: 0.04462491923494771,\n        velocity: 0.0023884377019126306\n      }, {\n        value: 0.09020401043104986,\n        velocity: 0.003032653298563167\n      }, {\n        value: 0.1443048016123466,\n        velocity: 0.0034227807935506135\n      }, {\n        value: 0.2032366177370234,\n        velocity: 0.0036216517375589853\n      }, {\n        value: 0.26424111765711555,\n        velocity: 0.003678794411714423\n      }, {\n        value: 0.32529301485170514,\n        velocity: 0.0036330376123369723\n      }, {\n        value: 0.38494001106330433,\n        velocity: 0.0035146285082096897\n      }, {\n        value: 0.44217459962892547,\n        velocity: 0.0033469524022264477\n      }, {\n        value: 0.49633172576650164,\n        velocity: 0.003147926713959365\n      }, {\n        value: 0.547007386107534,\n        velocity: 0.002931128678127722\n      }, {\n        value: 0.5939941502901618,\n        velocity: 0.0027067056647322543\n      }, {\n        value: 0.6372303273564889,\n        velocity: 0.002482108286508234\n      }, {\n        value: 0.6767601071186498,\n        velocity: 0.002262679250169452\n      }, {\n        value: 0.7127025048163542,\n        velocity: 0.0020521249655974703\n      }, {\n        value: 0.7452273455163944,\n        velocity: 0.001852892032608041\n      }, {\n        value: 0.7745368587040187,\n        velocity: 0.001666466696535514\n      }, {\n        value: 0.8008517265285442,\n        velocity: 0.0014936120510359184\n      }, {\n        value: 0.8244006520446817,\n        velocity: 0.001334555044460419\n      }, {\n        value: 0.8454126954952397,\n        velocity: 0.0011891331115750795\n      }, {\n        value: 0.8641117745995668,\n        velocity: 0.0010569084197811474\n      }, {\n        value: 0.8807128450362989,\n        velocity: 0.0009372562175719375\n      }, {\n        value: 0.8954193748557835,\n        velocity: 0.0008294325442472347\n      }, {\n        value: 0.9084218055563291,\n        velocity: 0.0007326255555493669\n      }, {\n        value: 0.9198967564051186,\n        velocity: 0.0006459938999587211\n      }, {\n        value: 0.9300067800696483,\n        velocity: 0.0005686949119341078\n      }, {\n        value: 0.9389005190396674,\n        velocity: 0.0004999048442209032\n      }, {\n        value: 0.9467131455415272,\n        velocity: 0.0004388329190697757\n      }, {\n        value: 0.9535669942158791,\n        velocity: 0.0003847306193541442\n      }, {\n        value: 0.9595723180054873,\n        velocity: 0.00033689734995427266\n      }, {\n        value: 0.9648281145122878,\n        velocity: 0.0002946833648970487\n      }, {\n        value: 0.969422983372401,\n        velocity: 0.00025749066633767647\n      }, {\n        value: 0.9734359856499836,\n        velocity: 0.00022477242911552353\n      }, {\n        value: 0.9769374844235683,\n        velocity: 0.0001960313823996695\n      }, {\n        value: 0.9799899520854091,\n        velocity: 0.00017081748219772755\n      }, {\n        value: 0.9826487347633355,\n        velocity: 0.0001487251305999815\n      }, {\n        value: 0.9849627680037535,\n        velocity: 0.00012939013578165578\n      }, {\n        value: 0.9869752406646145,\n        velocity: 0.00011248655789651067\n      }, {\n        value: 0.9887242060526682,\n        velocity: 0.00009772354754354227\n      }, {\n        value: 0.9902431408563948,\n        velocity: 0.000084842253422654\n      }, {\n        value: 0.9915614535000543,\n        velocity: 0.00007361285244633517\n      }, {\n        value: 0.9927049442755639,\n        velocity: 0.00006383173758881623\n      }, {\n        value: 0.9936962200773563,\n        velocity: 0.000055318885035444956\n      }, {\n        value: 0.9945550668344385,\n        velocity: 0.00004791541185694135\n      }, {\n        value: 0.9952987828537434,\n        velocity: 0.00004148132776108765\n      }, {\n        value: 0.9959424762990092,\n        velocity: 0.000035893478893379674\n      }, {\n        value: 0.9964993299607008,\n        velocity: 0.00003104367770699274\n      }, {\n        value: 0.9969808363488774,\n        velocity: 0.000026837010232201053\n      }, {\n        value: 0.9973970059808868,\n        velocity: 0.000023190310352099363\n      }, {\n        value: 0.9977565515534178,\n        velocity: 0.00002003078970162627\n      }, {\n        value: 0.9980670504943989,\n        velocity: 0.000017294811365904836\n      }, {\n        value: 0.9983350881923788,\n        velocity: 0.000014926795516603616\n      }, {\n        value: 0.9985663840051094,\n        velocity: 0.00001287824537782997\n      }, {\n        value: 0.9987659019591332,\n        velocity: 0.000011106882367801231\n      }, {\n        value: 0.9989379478710443,\n        velocity: 0.000009575879851239716\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n    });\n    (0, _qunit.test)('overdamped spring', function (assert) {\n      let overdampedSpring = new _spring.default({\n        stiffness: 100,\n        damping: 25,\n        mass: 1,\n        allowsOverdamping: true\n      });\n      assert.deepEqual(overdampedSpring.toFrames({\n        from: 0,\n        to: 1\n      }), [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0.012117884018832292,\n        velocity: 0.0013567540270368935\n      }, {\n        value: 0.04249673982337865,\n        velocity: 0.0022204307057201444\n      }, {\n        value: 0.08422543629527413,\n        velocity: 0.0027394756126664175\n      }, {\n        value: 0.13249063194019006,\n        velocity: 0.003019561149720417\n      }, {\n        value: 0.18397102734526227,\n        velocity: 0.0031357668490858805\n      }, {\n        value: 0.23640421479535967,\n        velocity: 0.0031413025098401383\n      }, {\n        value: 0.2882771282614057,\n        velocity: 0.003073754519370947\n      }, {\n        value: 0.33860499169747793,\n        velocity: 0.0029595577853986053\n      }, {\n        value: 0.38677361913460173,\n        velocity: 0.002817196562487673\n      }, {\n        value: 0.43242705310631335,\n        velocity: 0.0026594947677321705\n      }, {\n        value: 0.47538763860903943,\n        velocity: 0.002495254140922265\n      }, {\n        value: 0.5155992914009884,\n        velocity: 0.0023304253485513867\n      }, {\n        value: 0.5530873427699907,\n        velocity: 0.002168944642465341\n      }, {\n        value: 0.5879302222977014,\n        velocity: 0.002013331075754017\n      }, {\n        value: 0.6202395865194417,\n        velocity: 0.001865112332407365\n      }, {\n        value: 0.6501464658436414,\n        velocity: 0.0017251279208126357\n      }, {\n        value: 0.6777916929312899,\n        velocity: 0.0015937446486612274\n      }, {\n        value: 0.7033193705276489,\n        velocity: 0.001471009386478424\n      }, {\n        value: 0.7268724910753659,\n        velocity: 0.0013567570268944989\n      }, {\n        value: 0.7485900741503642,\n        velocity: 0.0012506864602414805\n      }, {\n        value: 0.7686053693879248,\n        velocity: 0.0011524137432326039\n      }, {\n        value: 0.7870448025536975,\n        velocity: 0.0010615090273321756\n      }, {\n        value: 0.8040274354132486,\n        velocity: 0.0009775219438754928\n      }, {\n        value: 0.8196647765604841,\n        velocity: 0.000899998804058067\n      }, {\n        value: 0.834060827899976,\n        velocity: 0.000828494013118022\n      }, {\n        value: 0.8473122854284034,\n        velocity: 0.0007625774115781786\n      }, {\n        value: 0.8595088371855433,\n        velocity: 0.00070183876505185\n      }, {\n        value: 0.8707335185103466,\n        velocity: 0.0006458902725049675\n      }, {\n        value: 0.8810630970230116,\n        velocity: 0.0005943677113545693\n      }, {\n        value: 0.8905684684780559,\n        velocity: 0.0005469306579609079\n      }, {\n        value: 0.8993150508120259,\n        velocity: 0.0005032620935840068\n      }, {\n        value: 0.9073631680699791,\n        velocity: 0.00046306761414439024\n      }, {\n        value: 0.9147684189579867,\n        velocity: 0.00042607439670611525\n      }, {\n        value: 0.921582026907279,\n        velocity: 0.0003920300290058252\n      }, {\n        value: 0.9278511700159389,\n        velocity: 0.00036070127522479256\n      }, {\n        value: 0.9336192902469659,\n        velocity: 0.00033187282770340395\n      }, {\n        value: 0.9389263819433481,\n        velocity: 0.0003053460776806097\n      }, {\n        value: 0.9438092601688999,\n        velocity: 0.0002809379264364749\n      }, {\n        value: 0.9483018096675063,\n        velocity: 0.0002584796500154336\n      }, {\n        value: 0.9524352154025942,\n        velocity: 0.00023781582500306738\n      }, {\n        value: 0.9562381757283864,\n        velocity: 0.00021880331889900692\n      }, {\n        value: 0.959737099279815,\n        velocity: 0.00020131034595732925\n      }, {\n        value: 0.9629562866666219,\n        velocity: 0.000185215587585076\n      }, {\n        value: 0.9659180980316832,\n        velocity: 0.00017040737523618725\n      }, {\n        value: 0.9686431074927613,\n        velocity: 0.0001567829330245908\n      }, {\n        value: 0.9711502454368727,\n        velocity: 0.00014424767687268346\n      }, {\n        value: 0.9734569295815177,\n        velocity: 0.00013271456681497061\n      }, {\n        value: 0.9755791856600793,\n        velocity: 0.00012210350902373\n      }, {\n        value: 0.9775317585317287,\n        velocity: 0.00011234080416647546\n      }, {\n        value: 0.9793282144604826,\n        velocity: 0.000103358638810161\n      }, {\n        value: 0.98098103525446,\n        velocity: 0.00009509461673081404\n      }, {\n        value: 0.9825017049053953,\n        velocity: 0.00008749132715327334\n      }, {\n        value: 0.9839007893203391,\n        velocity: 0.00008049594712255959\n      }, {\n        value: 0.9851880096923368,\n        velocity: 0.00007405987538841729\n      }, {\n        value: 0.986372310014724,\n        velocity: 0.00006813839536259338\n      }, {\n        value: 0.9874619192044505,\n        velocity: 0.00006269036488108608\n      }, {\n        value: 0.988464408263438,\n        velocity: 0.00005767793066882812\n      }, {\n        value: 0.989386742873251,\n        velocity: 0.00005306626556084932\n      }, {\n        value: 0.9902353317871699,\n        velocity: 0.00004882332668129213\n      }, {\n        value: 0.9910160713549372,\n        velocity: 0.000044919632919545815\n      }, {\n        value: 0.9917343864888577,\n        velocity: 0.00004132806017130614\n      }, {\n        value: 0.9923952683554006,\n        velocity: 0.00003802365293183913\n      }, {\n        value: 0.9930033090538435,\n        velocity: 0.000034983450939502394\n      }, {\n        value: 0.9935627335226628,\n        velocity: 0.00003218632967011508\n      }, {\n        value: 0.9940774288951881,\n        velocity: 0.00002961285357755119\n      }, {\n        value: 0.9945509715083635,\n        velocity: 0.00002724514106344842\n      }, {\n        value: 0.9949866517521907,\n        velocity: 0.000025066740239675953\n      }, {\n        value: 0.9953874969324523,\n        velocity: 0.000023062514621658002\n      }, {\n        value: 0.9957562923055266,\n        velocity: 0.0000212185379592725\n      }, {\n        value: 0.996095600431419,\n        velocity: 0.00001952199747525742\n      }, {\n        value: 0.9964077789794578,\n        velocity: 0.000017961104839279876\n      }, {\n        value: 0.996694997110362,\n        velocity: 0.000016525014259433422\n      }, {\n        value: 0.9969592505484938,\n        velocity: 0.000015203747122280922\n      }, {\n        value: 0.9972023754490196,\n        velocity: 0.000013988122657991422\n      }, {\n        value: 0.9974260611563257,\n        velocity: 0.00001286969414893177\n      }, {\n        value: 0.9976318619423379,\n        velocity: 0.000011840690238554848\n      }, {\n        value: 0.9978212078063018,\n        velocity: 0.000010893960932839616\n      }, {\n        value: 0.9979954144110663,\n        velocity: 0.00001002292791912321\n      }, {\n        value: 0.9981556922249085,\n        velocity: 0.000009221538857153365\n      }, {\n        value: 0.9983031549324213,\n        velocity: 0.000008484225324778078\n      }, {\n        value: 0.998438827172905,\n        velocity: 0.000007805864126077613\n      }, {\n        value: 0.9985636516600326,\n        velocity: 0.000007181741693103174\n      }, {\n        value: 0.9986784957322595,\n        velocity: 0.0000066075213338772975\n      }, {\n        value: 0.9987841573794911,\n        velocity: 0.000006079213099087144\n      }, {\n        value: 0.9988813707878856,\n        velocity: 0.000005593146058094666\n      }, {\n        value: 0.9989708114413194,\n        velocity: 0.000005145942791628189\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n      let overdampedSpringWithoutOverdamping = new _spring.default({\n        stiffness: 100,\n        damping: 25,\n        mass: 1,\n        allowsOverdamping: false\n      });\n      assert.deepEqual(overdampedSpringWithoutOverdamping.toFrames({\n        from: 0,\n        to: 1\n      }), [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0.012437987627616942,\n        velocity: 0.0014108028748176901\n      }, {\n        value: 0.04462491923494771,\n        velocity: 0.0023884377019126306\n      }, {\n        value: 0.09020401043104986,\n        velocity: 0.003032653298563167\n      }, {\n        value: 0.1443048016123466,\n        velocity: 0.0034227807935506135\n      }, {\n        value: 0.2032366177370234,\n        velocity: 0.0036216517375589853\n      }, {\n        value: 0.26424111765711555,\n        velocity: 0.003678794411714423\n      }, {\n        value: 0.32529301485170514,\n        velocity: 0.0036330376123369723\n      }, {\n        value: 0.38494001106330433,\n        velocity: 0.0035146285082096897\n      }, {\n        value: 0.44217459962892547,\n        velocity: 0.0033469524022264477\n      }, {\n        value: 0.49633172576650164,\n        velocity: 0.003147926713959365\n      }, {\n        value: 0.547007386107534,\n        velocity: 0.002931128678127722\n      }, {\n        value: 0.5939941502901618,\n        velocity: 0.0027067056647322543\n      }, {\n        value: 0.6372303273564889,\n        velocity: 0.002482108286508234\n      }, {\n        value: 0.6767601071186498,\n        velocity: 0.002262679250169452\n      }, {\n        value: 0.7127025048163542,\n        velocity: 0.0020521249655974703\n      }, {\n        value: 0.7452273455163944,\n        velocity: 0.001852892032608041\n      }, {\n        value: 0.7745368587040187,\n        velocity: 0.001666466696535514\n      }, {\n        value: 0.8008517265285442,\n        velocity: 0.0014936120510359184\n      }, {\n        value: 0.8244006520446817,\n        velocity: 0.001334555044460419\n      }, {\n        value: 0.8454126954952397,\n        velocity: 0.0011891331115750795\n      }, {\n        value: 0.8641117745995668,\n        velocity: 0.0010569084197811474\n      }, {\n        value: 0.8807128450362989,\n        velocity: 0.0009372562175719375\n      }, {\n        value: 0.8954193748557835,\n        velocity: 0.0008294325442472347\n      }, {\n        value: 0.9084218055563291,\n        velocity: 0.0007326255555493669\n      }, {\n        value: 0.9198967564051186,\n        velocity: 0.0006459938999587211\n      }, {\n        value: 0.9300067800696483,\n        velocity: 0.0005686949119341078\n      }, {\n        value: 0.9389005190396674,\n        velocity: 0.0004999048442209032\n      }, {\n        value: 0.9467131455415272,\n        velocity: 0.0004388329190697757\n      }, {\n        value: 0.9535669942158791,\n        velocity: 0.0003847306193541442\n      }, {\n        value: 0.9595723180054873,\n        velocity: 0.00033689734995427266\n      }, {\n        value: 0.9648281145122878,\n        velocity: 0.0002946833648970487\n      }, {\n        value: 0.969422983372401,\n        velocity: 0.00025749066633767647\n      }, {\n        value: 0.9734359856499836,\n        velocity: 0.00022477242911552353\n      }, {\n        value: 0.9769374844235683,\n        velocity: 0.0001960313823996695\n      }, {\n        value: 0.9799899520854091,\n        velocity: 0.00017081748219772755\n      }, {\n        value: 0.9826487347633355,\n        velocity: 0.0001487251305999815\n      }, {\n        value: 0.9849627680037535,\n        velocity: 0.00012939013578165578\n      }, {\n        value: 0.9869752406646145,\n        velocity: 0.00011248655789651067\n      }, {\n        value: 0.9887242060526682,\n        velocity: 0.00009772354754354227\n      }, {\n        value: 0.9902431408563948,\n        velocity: 0.000084842253422654\n      }, {\n        value: 0.9915614535000543,\n        velocity: 0.00007361285244633517\n      }, {\n        value: 0.9927049442755639,\n        velocity: 0.00006383173758881623\n      }, {\n        value: 0.9936962200773563,\n        velocity: 0.000055318885035444956\n      }, {\n        value: 0.9945550668344385,\n        velocity: 0.00004791541185694135\n      }, {\n        value: 0.9952987828537434,\n        velocity: 0.00004148132776108765\n      }, {\n        value: 0.9959424762990092,\n        velocity: 0.000035893478893379674\n      }, {\n        value: 0.9964993299607008,\n        velocity: 0.00003104367770699274\n      }, {\n        value: 0.9969808363488774,\n        velocity: 0.000026837010232201053\n      }, {\n        value: 0.9973970059808868,\n        velocity: 0.000023190310352099363\n      }, {\n        value: 0.9977565515534178,\n        velocity: 0.00002003078970162627\n      }, {\n        value: 0.9980670504943989,\n        velocity: 0.000017294811365904836\n      }, {\n        value: 0.9983350881923788,\n        velocity: 0.000014926795516603616\n      }, {\n        value: 0.9985663840051094,\n        velocity: 0.00001287824537782997\n      }, {\n        value: 0.9987659019591332,\n        velocity: 0.000011106882367801231\n      }, {\n        value: 0.9989379478710443,\n        velocity: 0.000009575879851239716\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n      let criticallydampedSpring = new _spring.default({\n        stiffness: 100,\n        damping: 20,\n        mass: 1\n      });\n      assert.deepEqual(overdampedSpringWithoutOverdamping.toFrames({\n        from: 0,\n        to: 1\n      }), criticallydampedSpring.toFrames({\n        from: 0,\n        to: 1\n      }));\n    });\n    (0, _qunit.test)('takes a delay into account', function (assert) {\n      let clampedSpring = new _spring.default({\n        overshootClamping: true\n      });\n      let frames = clampedSpring.toFrames({\n        from: 0,\n        to: 1,\n        delay: 50\n      });\n      assert.equal(frames.length, 19);\n      assert.deepEqual(frames, [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0,\n        velocity: 0\n      }, {\n        value: 0.01311832586992645,\n        velocity: 0.0015280885700403079\n      }, {\n        value: 0.04941510804510185,\n        velocity: 0.0027825797446520348\n      }, {\n        value: 0.10440547345507933,\n        velocity: 0.003773452034749069\n      }, {\n        value: 0.1738158635405722,\n        velocity: 0.004515881528317108\n      }, {\n        value: 0.2536606857419862,\n        velocity: 0.0050290565638031835\n      }, {\n        value: 0.3402998466082985,\n        velocity: 0.00533507195114693\n      }, {\n        value: 0.430478632885834,\n        velocity: 0.005457918755914951\n      }, {\n        value: 0.5213516324407461,\n        velocity: 0.005422580763871937\n      }, {\n        value: 0.6104925345574281,\n        velocity: 0.005254244313351903\n      }, {\n        value: 0.695891727212196,\n        velocity: 0.004977624262194077\n      }, {\n        value: 0.7759436260445078,\n        velocity: 0.0046164054666648965\n      }, {\n        value: 0.8494256348541123,\n        velocity: 0.004192796296663319\n      }, {\n        value: 0.9154705594181388,\n        velocity: 0.00372718838511412\n      }, {\n        value: 0.973534183862093,\n        velocity: 0.0032379149883166444\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n    });\n    (0, _qunit.test)('takes previous velocity into account', function (assert) {\n      let clampedSpring = new _spring.default({\n        overshootClamping: true\n      });\n      let frames = clampedSpring.toFrames({\n        from: 0,\n        to: 1,\n        velocity: 0.01\n      });\n      assert.equal(frames.length, 20);\n      assert.deepEqual(frames, [{\n        value: 0,\n        velocity: -0.009999999999999998\n      }, {\n        value: -0.13969053113410435,\n        velocity: -0.006812639601220119\n      }, {\n        value: -0.22884286642010165,\n        velocity: -0.003940689430244914\n      }, {\n        value: -0.2729397300198275,\n        velocity: -0.0014090411959510694\n      }, {\n        value: -0.2777722892911385,\n        velocity: 0.0007699216920399373\n      }, {\n        value: -0.24924497063833218,\n        velocity: 0.0025947199850262265\n      }, {\n        value: -0.19320734850639454,\n        velocity: 0.004073142368376845\n      }, {\n        value: -0.1153132427056609,\n        velocity: 0.00522062384068824\n      }, {\n        value: -0.020906443946447695,\n        velocity: 0.006058677852151335\n      }, {\n        value: 0.0850681032222379,\n        velocity: 0.0066134139722780864\n      }, {\n        value: 0.19812930099278847,\n        velocity: 0.006914165796510115\n      }, {\n        value: 0.31430307937801827,\n        velocity: 0.00699224719377487\n      }, {\n        value: 0.43014600518778046,\n        velocity: 0.00687984894186776\n      }, {\n        value: 0.5427517209067267,\n        velocity: 0.006609082364409629\n      }, {\n        value: 0.6497426850304286,\n        velocity: 0.006211171815254218\n      }, {\n        value: 0.7492496812009896,\n        velocity: 0.005715793773180974\n      }, {\n        value: 0.8398814969300373,\n        velocity: 0.005150556910599277\n      }, {\n        value: 0.9206870550754027,\n        velocity: 0.00454061476658472\n      }, {\n        value: 0.9911121233903707,\n        velocity: 0.003908400554444941\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n      frames = clampedSpring.toFrames({\n        from: 0,\n        to: 1,\n        velocity: -0.01\n      });\n      assert.equal(frames.length, 9);\n      assert.deepEqual(frames, [{\n        value: 0,\n        velocity: 0.01\n      }, {\n        value: 0.16592718287395725,\n        velocity: 0.009868816741300735\n      }, {\n        value: 0.32767308251030525,\n        velocity: 0.009505848919548983\n      }, {\n        value: 0.4817506769299862,\n        velocity: 0.008955945265449206\n      }, {\n        value: 0.6254040163722829,\n        velocity: 0.008261841364594279\n      }, {\n        value: 0.7565663421223043,\n        velocity: 0.007463393142580138\n      }, {\n        value: 0.8738070417229914,\n        velocity: 0.006597001533917015\n      }, {\n        value: 0.976270508477329,\n        velocity: 0.00569521367114166\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n      frames = clampedSpring.toFrames({\n        from: 0,\n        to: 1,\n        velocity: -1\n      });\n      assert.equal(frames.length, 2);\n      assert.deepEqual(frames, [{\n        value: 0,\n        velocity: 1\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n    }); // TODO: I don't think passing a velocity together with a delay makes too much sense\n\n    (0, _qunit.test)('takes previous velocity and delay into account', function (assert) {\n      let clampedSpring = new _spring.default({\n        overshootClamping: true\n      });\n      let frames = clampedSpring.toFrames({\n        from: 0.25,\n        to: 1,\n        velocity: -0.01,\n        delay: 50\n      });\n      assert.equal(frames.length, 10);\n      assert.deepEqual(frames, [{\n        value: 0.25,\n        velocity: 0\n      }, {\n        value: 0.25,\n        velocity: 0\n      }, {\n        value: 0.25,\n        velocity: 0\n      }, {\n        value: 0.25,\n        velocity: 0.01\n      }, {\n        value: 0.4126476014064757,\n        velocity: 0.009486794598790657\n      }, {\n        value: 0.5653193054990298,\n        velocity: 0.008810203983385974\n      }, {\n        value: 0.7056493085662163,\n        velocity: 0.008012582256761939\n      }, {\n        value: 0.83195005048714,\n        velocity: 0.007132870982515002\n      }, {\n        value: 0.9431511706868079,\n        velocity: 0.006206129001629344\n      }, {\n        value: 1,\n        velocity: 0\n      }]);\n    });\n  });\n});","define(\"animations/tests/unit/models/sprite-tree-test\", [\"animations/models/sprite-tree\", \"qunit\"], function (_spriteTree, _qunit) {\n  \"use strict\";\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  class MockAnimationContext {\n    constructor(parentEl = null, id = undefined) {\n      _defineProperty(this, \"id\", void 0);\n\n      _defineProperty(this, \"element\", void 0);\n\n      _defineProperty(this, \"isAnimationContext\", true);\n\n      this.element = document.createElement('div');\n\n      if (parentEl) {\n        parentEl.appendChild(this.element);\n      }\n\n      this.id = id;\n    }\n\n  }\n\n  class MockSpriteModifier {\n    constructor(parentEl = null) {\n      _defineProperty(this, \"element\", void 0);\n\n      _defineProperty(this, \"farMatch\", false);\n\n      _defineProperty(this, \"id\", 'Mock');\n\n      this.element = document.createElement('div');\n\n      if (parentEl) {\n        parentEl.appendChild(this.element);\n      }\n    }\n\n  }\n\n  (0, _qunit.module)('Unit | Models | SpriteTree', function (hooks) {\n    let subject;\n    hooks.beforeEach(function () {\n      subject = new _spriteTree.default();\n    });\n    (0, _qunit.module)('empty', function () {\n      (0, _qunit.test)('constructing an empty tree', function (assert) {\n        assert.ok(subject);\n        assert.equal(subject.rootNodes.size, 0, 'tree has no rootNodes initially');\n      });\n      (0, _qunit.test)('adding a root animation context node', function (assert) {\n        let context = new MockAnimationContext();\n        let node = subject.addAnimationContext(context);\n        assert.ok(node, 'addAnimationContext returns a node');\n        assert.equal(node, subject.lookupNodeByElement(context.element), 'can lookup node after adding it');\n        assert.equal(node.isRoot, true, 'context node with none above it isRoot');\n        assert.equal(node.children.size, 0, 'context node has no children yet');\n        assert.equal(subject.rootNodes.size, 1, 'tree has one rootNode');\n        assert.equal(Array.from(subject.rootNodes)[0], node, 'tree has context node has root node');\n      });\n      (0, _qunit.test)('adding a sprite modifier and then its parent animation context node', function (assert) {\n        let context = new MockAnimationContext();\n        let spriteModifier = new MockSpriteModifier(context.element);\n        let spriteModifierNode = subject.addSpriteModifier(spriteModifier);\n        let contextNode = subject.addAnimationContext(context);\n        assert.equal(contextNode.isRoot, true, 'context node with none above it isRoot');\n        assert.equal(spriteModifierNode.isRoot, false, 'spriteModifier node under context is not isRoot');\n        assert.equal(spriteModifierNode.children.size, 0, 'spriteModifierNode node has no children yet');\n        assert.equal(contextNode.children.size, 1, 'context node has one childNode');\n        assert.equal(subject.rootNodes.size, 1, 'tree has one rootNode');\n        assert.equal(Array.from(subject.rootNodes)[0], contextNode, 'tree has context node as root node');\n        assert.equal(Array.from(contextNode.children)[0], spriteModifierNode, 'context node has one has sprite node as child');\n      });\n    });\n    (0, _qunit.module)('with a context node', function (hooks) {\n      let context, contextNode;\n      hooks.beforeEach(function () {\n        context = new MockAnimationContext();\n        contextNode = subject.addAnimationContext(context);\n      });\n      (0, _qunit.test)('adding a sprite modifier directly under context', function (assert) {\n        let spriteModifer = new MockSpriteModifier(context.element);\n        let spriteNode = subject.addSpriteModifier(spriteModifer);\n        assert.ok(spriteNode, 'addSpriteModifier returns a node');\n        assert.equal(spriteNode, subject.lookupNodeByElement(spriteModifer.element), 'can lookup node after adding it');\n        assert.equal(spriteNode.isRoot, false, 'sprite node nested under a context has isRoot false');\n        assert.equal(spriteNode.parent, contextNode, 'sprite node has its parent set correctly');\n        assert.equal(contextNode.children.size, 1, 'context node has one childNode');\n        assert.equal(Array.from(contextNode.children)[0], spriteNode, 'context node has sprite node as child');\n      });\n      (0, _qunit.test)('adding a sprite modifier under context with other elements in between', function (assert) {\n        let context = new MockAnimationContext();\n        let contextNode = subject.addAnimationContext(context);\n        let elementBetweenContextAndSprite = document.createElement('div');\n        context.element.appendChild(elementBetweenContextAndSprite);\n        let elementBetweenContextAndSprite2 = document.createElement('div');\n        elementBetweenContextAndSprite.appendChild(elementBetweenContextAndSprite2);\n        let spriteModifer = new MockSpriteModifier(elementBetweenContextAndSprite2);\n        let spriteNode = subject.addSpriteModifier(spriteModifer);\n        assert.ok(spriteNode, 'addSpriteModifier returns a node');\n        assert.equal(spriteNode, subject.lookupNodeByElement(spriteModifer.element), 'can lookup node after adding it');\n        assert.equal(spriteNode.isRoot, false, 'sprite node nested under a context has isRoot false');\n        assert.equal(spriteNode.parent, contextNode, 'sprite node has its parent set correctly');\n      });\n      (0, _qunit.test)('adding a context nested under another context', function (assert) {\n        let nestedContext = new MockAnimationContext(context.element);\n        let nestedContextNode = subject.addAnimationContext(nestedContext);\n        assert.equal(nestedContextNode.isRoot, false, 'context node nested under a context has isRoot false');\n        assert.equal(nestedContextNode.parent, contextNode, 'nested context node has its parent set correctly');\n      });\n      (0, _qunit.test)('remove an animation context', function (assert) {\n        subject.removeAnimationContext(context);\n        assert.equal(subject.lookupNodeByElement(context.element), null, 'can no longer lookup node after removing it');\n        assert.equal(subject.rootNodes.size, 0, 'tree has no rootNodes left');\n      });\n      (0, _qunit.test)('getting a context run list', function (assert) {\n        assert.deepEqual(subject.getContextRunList(new Set([context])), [context]);\n      });\n    });\n    (0, _qunit.module)('with a context node and nested sprite modifier', function (hooks) {\n      let context, contextNode, spriteModifer, spriteNode;\n      hooks.beforeEach(function () {\n        context = new MockAnimationContext();\n        contextNode = subject.addAnimationContext(context);\n        spriteModifer = new MockSpriteModifier(context.element);\n        spriteNode = subject.addSpriteModifier(spriteModifer);\n      });\n      (0, _qunit.test)('adding a sprite modifier under another sprite modifier', function (assert) {\n        let nestedSpriteModifer = new MockSpriteModifier(spriteModifer.element);\n        let nestedSpriteNode = subject.addSpriteModifier(nestedSpriteModifer);\n        assert.equal(nestedSpriteNode.isRoot, false, 'sprite node nested under a sprite has isRoot false');\n        assert.equal(nestedSpriteNode.parent, spriteNode, 'nested sprite node has its parent set correctly');\n        let descendants = subject.descendantsOf(context);\n        assert.equal(descendants.length, 2, 'the context has two descendants');\n        assert.equal(descendants[0], spriteModifer, 'the first descendant is the spriteModifier');\n        assert.equal(descendants[1], nestedSpriteModifer, 'the second descendant is the nested spriteModifier');\n      });\n      (0, _qunit.test)('remove a sprite modifier', function (assert) {\n        subject.removeSpriteModifier(spriteModifer);\n        assert.equal(subject.lookupNodeByElement(spriteModifer.element), null, 'can no longer lookup node after removing it');\n        assert.equal(contextNode.children.size, 0, 'context node has no children yet');\n        assert.equal(contextNode.freshlyRemovedChildren.size, 1, 'context node has no freshlyRemovedChildren yet');\n        assert.equal(Array.from(contextNode.freshlyRemovedChildren)[0], spriteNode, 'context node has removed spriteNode in freshlyRemovedChildren');\n        let descendants = subject.descendantsOf(context);\n        assert.equal(descendants.length, 0, 'the context has no descendants');\n        let descendantsWithFreshRemovals = subject.descendantsOf(context, {\n          includeFreshlyRemoved: true\n        });\n        assert.equal(descendantsWithFreshRemovals.length, 1, 'descendants includes freshly removed when flag is passed');\n        assert.equal(descendantsWithFreshRemovals[0], spriteModifer, 'the returned descendant is the removed spriteModifier');\n      });\n    });\n    (0, _qunit.module)('with two context nodes, each with a sprite', function (hooks) {\n      let context1, context2, sprite1, sprite2;\n      hooks.beforeEach(function () {\n        context1 = new MockAnimationContext();\n        context2 = new MockAnimationContext();\n        sprite1 = new MockSpriteModifier(context1.element);\n        sprite2 = new MockSpriteModifier(context2.element);\n        subject.addAnimationContext(context1);\n        subject.addAnimationContext(context2);\n        subject.addSpriteModifier(sprite1);\n        subject.addSpriteModifier(sprite2);\n      });\n      (0, _qunit.test)('if a sprite is removed from one context, it is eligible for farmatching to another', function (assert) {\n        subject.removeSpriteModifier(sprite1);\n        assert.equal(subject.farMatchCandidatesFor(context2).length, 1);\n        assert.equal(subject.farMatchCandidatesFor(context2)[0], sprite1);\n        assert.equal(subject.farMatchCandidatesFor(context1).length, 0);\n        subject.clearFreshlyRemovedChildren();\n        assert.equal(subject.farMatchCandidatesFor(context2).length, 0);\n        assert.equal(subject.farMatchCandidatesFor(context1).length, 0);\n      });\n      (0, _qunit.test)('getting a context run list', function (assert) {\n        assert.deepEqual(subject.getContextRunList(new Set([context1])), [context1]);\n        assert.deepEqual(subject.getContextRunList(new Set([context2])), [context2]);\n        assert.deepEqual(subject.getContextRunList(new Set([context1, context2])), [context1, context2]);\n      });\n    });\n    (0, _qunit.module)('with a sprite modifier nested under another sprite modifier', function (hooks) {\n      let context, spriteModifer, spriteNode, nestedSpriteModifer, nestedSpriteNode;\n      hooks.beforeEach(function () {\n        context = new MockAnimationContext();\n        subject.addAnimationContext(context);\n        spriteModifer = new MockSpriteModifier(context.element);\n        spriteNode = subject.addSpriteModifier(spriteModifer);\n        nestedSpriteModifer = new MockSpriteModifier(spriteModifer.element);\n        nestedSpriteNode = subject.addSpriteModifier(nestedSpriteModifer);\n      });\n      (0, _qunit.test)('removing nested modifiers results in both being freshlyRemoved', function (assert) {\n        let otherContext = new MockAnimationContext();\n        subject.addAnimationContext(otherContext);\n        subject.removeSpriteModifier(nestedSpriteModifer);\n        subject.removeSpriteModifier(spriteModifer);\n        assert.equal(nestedSpriteNode.parent, spriteNode, 'nested sprite node has its parent set correctly');\n        let farMatchCandidates = subject.farMatchCandidatesFor(otherContext);\n        assert.equal(farMatchCandidates.length, 2, 'farMatchCandidates include both removed sprites');\n        assert.equal(farMatchCandidates[0], spriteModifer);\n        assert.equal(farMatchCandidates[1], nestedSpriteModifer);\n      });\n    });\n    (0, _qunit.module)('with two contexts nested under another context', function (hooks) {\n      let parentContext, childContext1, childContext2;\n      hooks.beforeEach(function () {\n        parentContext = new MockAnimationContext(null, 'parentContext');\n        subject.addAnimationContext(parentContext);\n        childContext1 = new MockAnimationContext(parentContext.element, 'childContext1');\n        subject.addAnimationContext(childContext1);\n        childContext2 = new MockAnimationContext(parentContext.element, 'childContext2');\n        subject.addAnimationContext(childContext2);\n      });\n      (0, _qunit.test)('getting a context run list', function (assert) {\n        assert.deepEqual(subject.getContextRunList(new Set([parentContext])), [parentContext], 'run list for the parent context just includes the parent context');\n        assert.deepEqual(subject.getContextRunList(new Set([parentContext, childContext1])), [childContext1, parentContext], 'when both parent and child are specified both are returned, with child first');\n        assert.deepEqual(subject.getContextRunList(new Set([childContext1])), [childContext1, parentContext], 'when a child is specified, the run list includes the child then the parent');\n        let runList = subject.getContextRunList(new Set([childContext1, childContext2]));\n        assert.ok(runList[0] === childContext1 || runList[0] === childContext2, 'when two children are specified, the parent is included once, after the children');\n        assert.ok(runList[1] === childContext1 || runList[1] === childContext2, 'when two children are specified, the parent is included once, after the children');\n        assert.equal(runList[2], parentContext, 'when two children are specified, the parent is included once, after the children');\n        assert.deepEqual(subject.getContextRunList(new Set([childContext2])), [childContext2, parentContext], 'when a child is specified, the run list includes the child then the parent');\n      });\n    });\n  });\n});","define(\"animations/tests/unit/services/animations-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | animations', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // TODO: Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:animations');\n      assert.ok(service);\n    });\n  });\n});","define(\"animations/tests/unit/util/css-to-unit-value-test\", [\"qunit\", \"animations/utils/css-to-unit-value\"], function (_qunit, _cssToUnitValue) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Util | CssToUnitValue', function () {\n    (0, _qunit.test)('parses integers', function (assert) {\n      let input = 0;\n      let output = (0, _cssToUnitValue.parse)(input);\n      assert.deepEqual(output, {\n        value: 0,\n        unit: ''\n      });\n    });\n    (0, _qunit.test)('parses floats', function (assert) {\n      let input = 0.5;\n      let output = (0, _cssToUnitValue.parse)(input);\n      assert.deepEqual(output, {\n        value: 0.5,\n        unit: ''\n      });\n    });\n    (0, _qunit.test)('parses px', function (assert) {\n      let input = '42px';\n      let output = (0, _cssToUnitValue.parse)(input);\n      assert.deepEqual(output, {\n        value: 42,\n        unit: 'px'\n      });\n    });\n    (0, _qunit.test)('parses negative values', function (assert) {\n      let input = '-42px';\n      let output = (0, _cssToUnitValue.parse)(input);\n      assert.deepEqual(output, {\n        value: -42,\n        unit: 'px'\n      });\n    });\n    (0, _qunit.test)('parses percentages', function (assert) {\n      let input = '-42%';\n      let output = (0, _cssToUnitValue.parse)(input);\n      assert.deepEqual(output, {\n        value: -42,\n        unit: '%'\n      });\n    });\n  });\n});","define(\"animations/tests/unit/util/instantaneous-velocity-test\", [\"qunit\", \"animations/utils/instantaneous-velocity\"], function (_qunit, _instantaneousVelocity) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Util | instantaneousVelocity', function () {\n    (0, _qunit.test)('calculates the instantaneous velocity in units per second (60FPS) based on the surrounding frames', function (assert) {\n      let frames = [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 10,\n        velocity: 0\n      }, {\n        value: 20,\n        velocity: 0\n      }];\n      assert.equal((0, _instantaneousVelocity.default)(1, frames), 0.0006);\n    });\n    (0, _qunit.test)('returns a velocity of 0 if there is no previous frame', function (assert) {\n      let frames = [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 10,\n        velocity: 0\n      }, {\n        value: 20,\n        velocity: 0\n      }];\n      assert.equal((0, _instantaneousVelocity.default)(0, frames), 0);\n    });\n    (0, _qunit.test)('returns a velocity of 0 if there is no next frame', function (assert) {\n      let frames = [{\n        value: 0,\n        velocity: 0\n      }, {\n        value: 10,\n        velocity: 0\n      }, {\n        value: 20,\n        velocity: 0\n      }];\n      assert.equal((0, _instantaneousVelocity.default)(2, frames), 0);\n    });\n  });\n});","define(\"animations/tests/unit/util/keyframe-generator-test\", [\"qunit\", \"animations/utils/keyframe-generator\"], function (_qunit, _keyframeGenerator) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Util | KeyframeGenerator', function () {\n    (0, _qunit.module)('generate', function () {\n      (0, _qunit.test)('from single keyframe motion', function (assert) {\n        let keyframeProviderStub = {\n          keyframes: [{\n            opacity: '0'\n          }, {\n            opacity: '1'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let generator = new _keyframeGenerator.default([keyframeProviderStub]);\n        assert.deepEqual(generator.keyframes, [{\n          offset: 0,\n          opacity: '0'\n        }, {\n          offset: 1,\n          opacity: '1'\n        }]);\n        assert.deepEqual(generator.keyframeAnimationOptions, {\n          duration: 500\n        });\n      });\n      (0, _qunit.test)('two keyframe motions', function (assert) {\n        let keyframeProviderStub1 = {\n          keyframes: [{\n            opacity: '0'\n          }, {\n            opacity: '1'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let keyframeProviderStub2 = {\n          keyframes: [{\n            width: '10px'\n          }, {\n            width: '20px'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let generator = new _keyframeGenerator.default([keyframeProviderStub1, keyframeProviderStub2]);\n        assert.deepEqual(generator.keyframes, [{\n          offset: 0,\n          opacity: '0',\n          width: '10px'\n        }, {\n          offset: 1,\n          opacity: '1',\n          width: '20px'\n        }]);\n        assert.deepEqual(generator.keyframeAnimationOptions, {\n          duration: 500\n        });\n      });\n      (0, _qunit.test)('two keyframe motions with 2 frames and 3 frames', function (assert) {\n        let keyframeProviderStub1 = {\n          keyframes: [{\n            opacity: '0'\n          }, {\n            opacity: '1'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let keyframeProviderStub2 = {\n          keyframes: [{\n            width: '10px'\n          }, {\n            width: '35px'\n          }, {\n            width: '20px'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let generator = new _keyframeGenerator.default([keyframeProviderStub1, keyframeProviderStub2]);\n        assert.deepEqual(generator.keyframes, [{\n          offset: 0,\n          opacity: '0',\n          width: '10px'\n        }, {\n          offset: 0.5,\n          width: '35px'\n        }, {\n          offset: 1,\n          opacity: '1',\n          width: '20px'\n        }]);\n        assert.deepEqual(generator.keyframeAnimationOptions, {\n          duration: 500\n        });\n      });\n      (0, _qunit.test)('two keyframe motions with explicit offset values', function (assert) {\n        let keyframeProviderStub1 = {\n          keyframes: [{\n            opacity: '0'\n          }, {\n            opacity: '0',\n            offset: 0.8\n          }, {\n            opacity: '1'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let keyframeProviderStub2 = {\n          keyframes: [{\n            width: '10px'\n          }, {\n            width: '35px',\n            offset: 0.2\n          }, {\n            width: '20px'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let generator = new _keyframeGenerator.default([keyframeProviderStub1, keyframeProviderStub2]);\n        assert.deepEqual(generator.keyframes, [{\n          offset: 0,\n          opacity: '0',\n          width: '10px'\n        }, {\n          offset: 0.2,\n          width: '35px'\n        }, {\n          offset: 0.8,\n          opacity: '0'\n        }, {\n          offset: 1,\n          opacity: '1',\n          width: '20px'\n        }]);\n        assert.deepEqual(generator.keyframeAnimationOptions, {\n          duration: 500\n        });\n      });\n      (0, _qunit.test)('three keyframe motions with different frame counts', function (assert) {\n        let keyframeProviderStub1 = {\n          keyframes: [{\n            opacity: '0'\n          }, {\n            opacity: '1'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let keyframeProviderStub2 = {\n          keyframes: [{\n            width: '10px'\n          }, {\n            width: '35px'\n          }, {\n            width: '20px'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let keyframeProviderStub3 = {\n          keyframes: [{\n            transform: 'translate(0,0)'\n          }, {\n            transform: 'translate(5,5)'\n          }, {\n            transform: 'translate(20,0)'\n          }, {\n            transform: 'translate(20,20)'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let generator = new _keyframeGenerator.default([keyframeProviderStub1, keyframeProviderStub2, keyframeProviderStub3]);\n        assert.deepEqual(generator.keyframes, [{\n          offset: 0,\n          opacity: '0',\n          width: '10px',\n          transform: 'translate(0,0)'\n        }, {\n          offset: 0.33,\n          transform: 'translate(5,5)'\n        }, {\n          offset: 0.5,\n          width: '35px'\n        }, {\n          offset: 0.67,\n          transform: 'translate(20,0)'\n        }, {\n          offset: 1,\n          opacity: '1',\n          width: '20px',\n          transform: 'translate(20,20)'\n        }]);\n        assert.deepEqual(generator.keyframeAnimationOptions, {\n          duration: 500\n        });\n      });\n      (0, _qunit.test)('two keyframe motions with different durations', function (assert) {\n        let keyframeProviderStub1 = {\n          keyframes: [{\n            opacity: '0'\n          }, {\n            opacity: '1'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let keyframeProviderStub2 = {\n          keyframes: [{\n            width: '10px'\n          }, {\n            width: '35px'\n          }, {\n            width: '20px'\n          }],\n          keyframeAnimationOptions: {\n            duration: 1000\n          }\n        };\n        let generator = new _keyframeGenerator.default([keyframeProviderStub2, keyframeProviderStub1]);\n        assert.deepEqual(generator.keyframes, [{\n          offset: 0,\n          opacity: '0',\n          width: '10px'\n        }, {\n          offset: 0.5,\n          opacity: '1',\n          width: '35px'\n        }, {\n          offset: 1,\n          opacity: '1',\n          width: '20px'\n        }]);\n        assert.deepEqual(generator.keyframeAnimationOptions, {\n          duration: 1000\n        });\n      });\n      (0, _qunit.test)('two keyframe motions with different durations, explicit offsets', function (assert) {\n        let keyframeProviderStub1 = {\n          keyframes: [{\n            opacity: '0'\n          }, {\n            opacity: '0.5',\n            offset: 0.6\n          }, {\n            opacity: '0.7',\n            offset: 0.8\n          }, {\n            opacity: '1'\n          }],\n          keyframeAnimationOptions: {\n            duration: 500\n          }\n        };\n        let keyframeProviderStub2 = {\n          keyframes: [{\n            width: '10px'\n          }, {\n            width: '35px',\n            offset: 0.4\n          }, {\n            width: '20px'\n          }],\n          keyframeAnimationOptions: {\n            duration: 1000\n          }\n        };\n        let generator = new _keyframeGenerator.default([keyframeProviderStub2, keyframeProviderStub1]);\n        assert.deepEqual(generator.keyframes, [{\n          offset: 0,\n          opacity: '0',\n          width: '10px'\n        }, {\n          offset: 0.3,\n          opacity: '0.5'\n        }, {\n          offset: 0.4,\n          width: '35px',\n          opacity: '0.7'\n        }, {\n          offset: 0.5,\n          opacity: '1'\n        }, {\n          offset: 1,\n          opacity: '1',\n          width: '20px'\n        }]);\n        assert.deepEqual(generator.keyframeAnimationOptions, {\n          duration: 1000\n        });\n      });\n      (0, _qunit.test)('two keyframe motions with delays', function (assert) {\n        let keyframeProviderStub1 = {\n          keyframes: [{\n            opacity: '0'\n          }, {\n            opacity: '1'\n          }],\n          keyframeAnimationOptions: {\n            delay: 200,\n            duration: 500\n          }\n        };\n        let keyframeProviderStub2 = {\n          keyframes: [{\n            width: '10px'\n          }, {\n            width: '35px'\n          }, {\n            width: '20px'\n          }],\n          keyframeAnimationOptions: {\n            delay: 100,\n            duration: 500\n          }\n        };\n        let generator = new _keyframeGenerator.default([keyframeProviderStub1, keyframeProviderStub2]);\n        assert.deepEqual(generator.keyframes, [{\n          offset: 0,\n          opacity: '0',\n          width: '10px'\n        }, {\n          offset: 0.14,\n          width: '10px'\n        }, {\n          offset: 0.29,\n          opacity: '0'\n        }, {\n          offset: 0.5,\n          width: '35px'\n        }, {\n          offset: 0.86,\n          width: '20px'\n        }, {\n          offset: 1,\n          opacity: '1',\n          width: '20px'\n        }]);\n        assert.deepEqual(generator.keyframeAnimationOptions, {\n          duration: 700\n        });\n      });\n      (0, _qunit.test)('two keyframe motions with delays, explicit offsets', function (assert) {\n        let keyframeProviderStub1 = {\n          keyframes: [{\n            opacity: '0'\n          }, {\n            opacity: '0.5',\n            offset: 0.6\n          }, {\n            opacity: '0.7',\n            offset: 0.8\n          }, {\n            opacity: '1'\n          }],\n          keyframeAnimationOptions: {\n            delay: 200,\n            duration: 500\n          }\n        };\n        let keyframeProviderStub2 = {\n          keyframes: [{\n            width: '10px'\n          }, {\n            width: '35px',\n            offset: 0.4\n          }, {\n            width: '20px'\n          }],\n          keyframeAnimationOptions: {\n            delay: 100,\n            duration: 500\n          }\n        };\n        let generator = new _keyframeGenerator.default([keyframeProviderStub1, keyframeProviderStub2]);\n        assert.deepEqual(generator.keyframes, [{\n          offset: 0,\n          opacity: '0',\n          width: '10px'\n        }, {\n          offset: 0.14,\n          width: '10px'\n        }, {\n          offset: 0.29,\n          opacity: '0'\n        }, {\n          offset: 0.43,\n          width: '35px'\n        }, {\n          offset: 0.71,\n          opacity: '0.5'\n        }, {\n          offset: 0.86,\n          width: '20px',\n          opacity: '0.7'\n        }, {\n          offset: 1,\n          opacity: '1',\n          width: '20px'\n        }]);\n        assert.deepEqual(generator.keyframeAnimationOptions, {\n          duration: 700\n        });\n      }); // conflicting easings\n    });\n  });\n});","define(\"animations/tests/unit/value/index-test\", [\"qunit\", \"animations/value/index\", \"animations/behaviors/linear\"], function (_qunit, _index, _linear) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | BaseValue | Index', function () {\n    (0, _qunit.module)('keyframe generation with linear behavior', function () {\n      (0, _qunit.test)('from single keyframe motion with 3 frames', function (assert) {\n        let value = new _index.default('opacity', 0);\n        assert.deepEqual(value.keyframes, []);\n        value.applyBehavior(new _linear.default(), 1, 1);\n        assert.deepEqual(value.keyframes, [{\n          opacity: 0\n        }, {\n          opacity: 1\n        }]);\n        value.applyBehavior(new _linear.default(), 0, 1);\n        assert.deepEqual(value.keyframes, [{\n          opacity: 1\n        }, {\n          opacity: 0\n        }]);\n      });\n      (0, _qunit.test)('keyframes are generated at 60 FPS', function (assert) {\n        let value = new _index.default('opacity', 0);\n        assert.deepEqual(value.keyframes, []);\n        value.applyBehavior(new _linear.default(), 1, 100);\n        assert.deepEqual(value.keyframes, [{\n          opacity: 0\n        }, {\n          opacity: 0.16666666666666666\n        }, {\n          opacity: 0.3333333333333333\n        }, {\n          opacity: 0.5\n        }, {\n          opacity: 0.6666666666666666\n        }, {\n          opacity: 0.8333333333333334\n        }, {\n          opacity: 1\n        }]);\n      });\n      (0, _qunit.test)('interruption based on time is handled', function (assert) {\n        let behavior = new _linear.default();\n        let value = new _index.default('opacity', 0, {\n          transferVelocity: false\n        });\n        assert.deepEqual(value.keyframes, []);\n        value.applyBehavior(behavior, 1, 100);\n        assert.deepEqual(value.keyframes, [{\n          opacity: 0\n        }, {\n          opacity: 0.16666666666666666\n        }, {\n          opacity: 0.3333333333333333\n        }, {\n          opacity: 0.5\n        }, {\n          opacity: 0.6666666666666666\n        }, {\n          opacity: 0.8333333333333334\n        }, {\n          opacity: 1\n        }]);\n        value.applyBehavior(behavior, 0.2, 34, 0, 50);\n        assert.deepEqual(value.keyframes, [{\n          opacity: 0.5\n        }, {\n          opacity: 0.35\n        }, {\n          opacity: 0.2\n        }]);\n      });\n      (0, _qunit.test)('keyframe generation with numerical units', function (assert) {\n        let value = new _index.default('left', '0px');\n        assert.deepEqual(value.keyframes, []);\n        value.applyBehavior(new _linear.default(), '100px', 33);\n        assert.deepEqual(value.keyframes, [{\n          left: '0px'\n        }, {\n          left: '50px'\n        }, {\n          left: '100px'\n        }]);\n      });\n      (0, _qunit.test)('keyframe generation with interruption and velocity transfer', function (assert) {\n        let value = new _index.default('opacity', 0);\n        assert.deepEqual(value.keyframes, []);\n        let behavior = new _linear.default();\n        value.applyBehavior(behavior, 1, 100);\n        assert.deepEqual(value.keyframes, [{\n          opacity: 0\n        }, {\n          opacity: 0.16666666666666666\n        }, {\n          opacity: 0.3333333333333333\n        }, {\n          opacity: 0.5\n        }, {\n          opacity: 0.6666666666666666\n        }, {\n          opacity: 0.8333333333333334\n        }, {\n          opacity: 1\n        }]);\n        value.applyBehavior(behavior, 0, 100, 0, 50);\n        assert.deepEqual(value.keyframes, [{\n          opacity: 0.5\n        }, {\n          opacity: 0.5833333333333334\n        }, {\n          opacity: 0.5000000000000001\n        }, {\n          opacity: 0.25\n        }, {\n          opacity: 0.16666666666666669\n        }, {\n          opacity: 0.08333333333333331\n        }, {\n          opacity: 0\n        }]);\n      });\n    });\n  });\n});","define('animations/config/environment', [], function() {\n  var prefix = 'animations';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('animations/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsnMA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrajBA;AACA;","file":"tests.js"}