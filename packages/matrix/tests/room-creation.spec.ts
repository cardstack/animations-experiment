import { expect, test } from '@playwright/test';
import { registerUser } from '../docker/synapse';
import {
  synapseStart,
  synapseStop,
  type SynapseInstance,
} from '../docker/synapse';
import {
  login,
  logout,
  assertRooms,
  createRoom,
  reloadAndOpenAiAssistant,
  registerRealmUsers,
} from '../helpers';

test.describe('Room creation', () => {
  let synapse: SynapseInstance;
  test.beforeEach(async () => {
    synapse = await synapseStart();
    await registerRealmUsers(synapse);
    await registerUser(synapse, 'user1', 'pass');
    await registerUser(synapse, 'user2', 'pass');
  });
  test.afterEach(async () => {
    await synapseStop(synapse.synapseId);
  });
  test('it can create a room with autogenerated name', async ({ page }) => {
    await login(page, 'user1', 'pass');
    await assertRooms(page, []);
    await assertRooms(page, []);

    let name = await createRoom(page);
    await assertRooms(page, [name]);

    await reloadAndOpenAiAssistant(page);
    await assertRooms(page, [name]);

    await logout(page);
    await login(page, 'user1', 'pass');
    await assertRooms(page, [name]);

    // user2 should not be able to see user1's room
    await logout(page);
    await login(page, 'user2', 'pass');
    await assertRooms(page, []);
  });

  test('it can create a room with user-edited name', async ({ page }) => {
    await login(page, 'user1', 'pass');
    await assertRooms(page, []);

    const name = 'Room 1';
    await createRoom(page, name);
    await assertRooms(page, [name]);

    await reloadAndOpenAiAssistant(page);
    await assertRooms(page, [name]);

    await logout(page);
    await login(page, 'user1', 'pass');
    await assertRooms(page, [name]);

    // user2 should not be able to see user1's room
    await logout(page);
    await login(page, 'user2', 'pass');
    await assertRooms(page, []);
  });

  // TODO: update
  test('it can cancel renaming a room', async ({ page }) => {
    await login(page, 'user1', 'pass');
    await page.locator('[data-test-create-room-mode-btn]').click();

    let name1 = await page.locator('[data-test-room-name-field]').inputValue();
    await expect(page.locator('[data-test-room-name-field]')).toHaveValue(
      name1,
    );
    await expect(
      page.locator('[data-test-create-room-mode-btn]'),
    ).toBeDisabled();
    await page.locator('[data-test-room-name-field]').fill('Room 1');
    await page.locator('[data-test-create-room-cancel-btn]').click();

    await assertRooms(page, []);

    await expect(
      page.locator('[data-test-create-room-mode-btn]'),
    ).toBeEnabled();
    await page.locator('[data-test-create-room-mode-btn]').click();
    let name2 = await page.locator('[data-test-room-name-field]').inputValue();
    await expect(page.locator('[data-test-room-name-field]')).toHaveValue(
      name2,
    );
    expect(name1).not.toEqual(name2);
    await expect(page.locator('[data-test-create-room-btn]')).toBeEnabled();
  });

  test('rooms are sorted by join date', async ({ page }) => {
    await login(page, 'user1', 'pass');
    await createRoom(page, 'Room Z');
    await createRoom(page, 'Room A');
    await assertRooms(page, ['Room Z', 'Room A']);
  });

  test('it shows an error when a room name is duplicated', async ({ page }) => {
    await login(page, 'user1', 'pass');
    await createRoom(page, 'Room 1');

    await page.locator('[data-test-create-room-mode-btn]').click();
    await page.locator('[data-test-room-name-field]').fill('Room 1');
    await expect(
      page.locator(
        '[data-test-room-name-field][data-test-boxel-input-validation-state="initial"]',
      ),
      'room name field displays initial validation state',
    ).toHaveCount(1);
    await expect(
      page.locator(
        '[data-test-room-name-field] ~ [data-test-boxel-input-error-message]',
      ),
      'no error message is displayed',
    ).toHaveCount(0);
    await page.locator('[data-test-save-room-name-button]').click();

    await expect(
      page.locator(
        '[data-test-room-name-field][data-test-boxel-input-validation-state="invalid"]',
      ),
      'room name field displays invalid validation state',
    ).toHaveCount(1);
    await expect(
      page.locator(
        '[data-test-room-name-field] ~ [data-test-boxel-input-error-message]',
      ),
    ).toContainText('Room already exists');

    await page.locator('[data-test-room-name-field]').fill('Room 2');
    await expect(
      page.locator(
        '[data-test-room-name-field][data-test-boxel-input-validation-state="initial"]',
      ),
      'room name field displays initial validation state',
    ).toHaveCount(1);
    await expect(
      page.locator(
        '[data-test-room-name-field] ~ [data-test-boxel-input-error-message]',
      ),
      'no error message is displayed',
    ).toHaveCount(0);
    await page.locator('[data-test-save-room-name-button]').click();
    await page.waitForFunction(() =>
      document.querySelector('[data-test-room-settled]'),
    );
    await assertRooms(page, ['Room 1', 'Room 2']);
  });
});
