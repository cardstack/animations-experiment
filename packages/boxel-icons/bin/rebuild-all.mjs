import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { optimize } from 'svgo';

const srcDirs = [
  new URL('../node_modules/@lucide/lab/icons', import.meta.url).pathname,
  new URL('../node_modules/lucide-static/icons', import.meta.url).pathname,
  new URL('../node_modules/@tabler/icons/icons/outline', import.meta.url)
    .pathname,
];

const destDir = new URL('../src', import.meta.url).pathname;
const iconsDestDir = new URL('../src/icons', import.meta.url).pathname;

const PREFIX = `
// This file is auto-generated by 'pnpm rebuild:all'
import type { TemplateOnlyComponent } from '@ember/component/template-only';

import type { Signature } from '../types.ts';

const IconComponent: TemplateOnlyComponent<Signature> = <template>
`;
const SUFFIX = `
</template>;

// @ts-expect-error this is the only way to set a name on a Template Only Component currently
IconComponent.name = "__ICON_COMPONENT_NAME__";
export default IconComponent;
`;
let componentsToGenerate = [];
for (const srcDir of srcDirs) {
  let batch = fs
    .readdirSync(srcDir)
    .filter((filename) => filename.endsWith('.svg'))
    .map((filename) => {
      return {
        name: toPascalCase(path.parse(filename).name),
        rawName: path.parse(filename).name,
        sourceFile: filename,
        fullPath: path.resolve(srcDir, filename),
        outFile: filename.replace('.svg', '.gts'),
      };
    });
  batch = batch.filter(
    (c) => !componentsToGenerate.find((c2) => c2.rawName === c.rawName),
  );
  componentsToGenerate = componentsToGenerate.concat(batch);
}
componentsToGenerate.sort((a, b) => a.name.localeCompare(b.name));

for (const c of componentsToGenerate) {
  let contents = fs.readFileSync(c.fullPath, 'utf-8');
  contents = optimize(contents, {
    path: c.fullPath,
    plugins: [
      {
        name: 'preset-default',
        params: {
          overrides: {
            removeTitle: false,
            removeDesc: { removeAny: false },
            removeViewBox: false,
          },
        },
      },
    ],
  }).data;
  contents = contents.replace(/<svg(.*?)>/, '<svg$1 ...attributes>');
  let suffix = SUFFIX.replace('__ICON_COMPONENT_NAME__', c.rawName);
  contents = `${PREFIX}${contents}${suffix}`;
  fs.writeFileSync(path.resolve(iconsDestDir, c.outFile), contents);
}

let metaContents = `// This file is auto-generated by 'pnpm rebuild'

import type { Icon } from './types.ts';

`;
metaContents += componentsToGenerate
  .map((c) => `import ${c.name} from './icons/${c.outFile}';`)
  .join('\n');
metaContents += '\n\n';
let componentNameArray = componentsToGenerate.map((c) => c.name);
metaContents += `export const ALL_ICON_COMPONENTS = [\n  ${componentNameArray.join(
  ',\n  ',
)},\n];\n`;
metaContents += `export {\n  type Icon,\n  ${componentNameArray.join(
  ',\n  ',
)},\n};\n`;
fs.writeFileSync(path.resolve(destDir, 'boxel-icons-meta.ts'), metaContents);

execSync(`prettier -w ${destDir}/**/*{.ts,.gts}`);

function toPascalCase(text) {
  return text.replace(/(^\w|-\w)/g, clearAndUpper);
}

function clearAndUpper(text) {
  return text.replace(/-/, '').toUpperCase();
}
