# This configuration runs each prompt through a series of example inputs and checks if they meet requirements.

prompts: [scripts/run_prompt.js:modify]
providers: [openai:gpt-4-0613]
defaultTest:
  options:
    rubricPrompt: >-
      You are assessing a submitted answer on a given task based on a criterion. Here is the data:
      [BEGIN DATA]
      ***
      [Task]: {{ '{{input}}' }}
      ***
      [Submission]: {{ '{{completion}}' }}
      ***
      [Criterion]: {{ '{{criteria}}' }}
      ***
      [Output]: {{ '{{output}}' }}
      ***
      [END DATA]
      Does the submission meet the criterion? First, write out in a step by step manner your reasoning about the criterion to be sure that your conclusion is correct. Avoid simply stating the correct answers at the outset. Then print only the single character "Y" or "N" (without quotes or punctuation) on its own line corresponding to the correct answer. At the end, repeat just the letter again by itself on a new line.

      Reasoning:
tests:
  - description: Update the name of a person
    vars:
      messages:
        [
          {
            "sender": "ian",
            "content":
              {
                "msgtype": "org.boxel.card",
                "body": "Can you change their name to Dave?",
                "instance":
                  {
                    "data":
                      {
                        "type": "card",
                        "id": "http://localhost:4201/drafts/Author/1",
                        "attributes":
                          { "firstName": "Bob", "lastName": "Enwunder" },
                        "meta":
                          {
                            "adoptsFrom":
                              { "module": "../author", "name": "Author" },
                          },
                      },
                  },
              },
          },
        ]
      aibot_username: "@aibot:localhost"
    assert:
      - type: contains-json
        value:
          {
            "required": ["id", "patch"],
            "type": "object",
            "properties":
              {
                "id":
                  {
                    "type": "string",
                    "pattern": "^http://localhost:4201/drafts/Author/1$",
                  },
                "patch":
                  {
                    "type": "object",
                    "properties":
                      {
                        "firstName": { "type": "string", "pattern": "^Dave$" },
                      },
                    "required": ["firstName"],
                  },
              },
          }
  - description: Update the name, understanding mis-spellings and world info
    vars:
      messages:
        [
          {
            "sender": "ian",
            "content":
              {
                "msgtype": "org.boxel.card",
                "body": "Can make this about Hemmingway instead?",
                "instance":
                  {
                    "data":
                      {
                        "type": "card",
                        "id": "http://localhost:4201/drafts/Author/1",
                        "attributes":
                          { "firstName": "Bob", "lastName": "Enwunder" },
                        "meta":
                          {
                            "adoptsFrom":
                              { "module": "../author", "name": "Author" },
                          },
                      },
                  },
              },
          },
        ]
      aibot_username: "@aibot:localhost"
    assert:
      - type: contains-json
        value:
          {
            "required": ["id", "patch"],
            "type": "object",
            "properties":
              {
                "id":
                  {
                    "type": "string",
                    "pattern": "^http://localhost:4201/drafts/Author/1$",
                  },
                "patch":
                  {
                    "type": "object",
                    "properties":
                      {
                        "firstName":
                          { "type": "string", "pattern": "^Ernest$" },
                        "lastName":
                          { "type": "string", "pattern": "^Hemingway$" },
                      },
                    "required": ["firstName", "lastName"],
                  },
              },
          }
  - description: Add bio information, and add a french translation
    vars:
      chat_history: tests/resources/chats/!EHSrJvmtuZtpNeKXsv:localhost.json
      cut_from_end: 7
    assert:
      - type: model-graded-closedqa
        value: Should contain at least one patch option with a description block that contains English and an accurate French translation.
